#include <stdlib.h>
#include <time.h>
#include <stdio.h>


     void swap(long int* a, long int* b)                  //swapping function
    {
    	int tmp = *a;
    	*a = *b;
    	*b = tmp;
    }

    void bubble_sort(long int arr[], long int n)          //bubble sort
    {
       long int i, j;
       for (i = 0; i < n-1; i++)

           for (j = 0; j < n-i-1; j++)
               if (arr[j] > arr[j+1])
                  swap(&arr[j], &arr[j+1]);
    }


    void selection_sort(long int arr[], long int n)        //selection sort
    {
        long int i, j, min_idx;
        for (i = 0; i < n-1; i++)
        {
            min_idx = i;
            for (j = i+1; j < n; j++)
            if (arr[j] < arr[min_idx])
                min_idx = j;

            swap(&arr[min_idx], &arr[i]);
        }
    }


    int partition(long int array[], long int low,long  int high)             //function for quicksort
    {

      long int pivot = array[high];


      long int i = (low - 1);

      for (long int j = low; j < high; j++) {
        if (array[j] <= pivot) {

          i++;

          swap(&array[i], &array[j]);
        }
      }
      swap(&array[i + 1], &array[high]);

      return (i + 1);
    }


    void quickSort(long int array[], long int low, long int high)           //quicksorting
    {
      if (low < high)
      {

        long int pi = partition(array, low, high);

        quickSort(array, low, pi - 1);

        quickSort(array, pi + 1, high);
      }
    }


    void merge(long int arr[],long  int start,long int mid,long int end)   //func for merge sort
    {

     long  int len1 = mid - start + 1;
      long int len2 = end - mid;

      long int leftArr[len1], rightArr[len2];

      for (long int i = 0; i < len1; i++)
        leftArr[i] = arr[start + i];
      for (long int j = 0; j < len2; j++)
        rightArr[j] = arr[mid + 1 + j];

     long int i, j, k;
      i = 0;
      j = 0;
      k = start;

      while (i < len1 && j < len2) {
        if (leftArr[i] <= rightArr[j]) {
          arr[k] = leftArr[i];
          i++;
        } else {
          arr[k] = rightArr[j];
          j++;
        }
        k++;
      }

      while (i < len1) {
        arr[k] = leftArr[i];
        i++;
        k++;
      }

      while (j < len2) {
        arr[k] = rightArr[j];
        j++;
        k++;
      }
    }

    void mergeSort(long int arr[],long int start,long int end)            //merge sorting
    {
      if (start < end) {

       long int mid = start + (end - start) / 2;
        mergeSort(arr, start, mid);
        mergeSort(arr, mid + 1, end);
        merge(arr, start, mid, end);
      }
    }

    int least(double first,double second,double third,double fourth)          // func to check which sorting had teast time consumed
    {
      if((first<second) && (first<third) && (first<fourth))
            return 1;
        else if((second<first) && (second<third) && (second<fourth))
            return 2;
        else if((third<second) && (third<first) && (third<fourth))
          return 3;
        else if((fourth<second) && (fourth<third) && (fourth<first))
            return 4;
    }

    int main()
    {
       long int n=10;                                                          //starting from n=10 array
        int it=0; //3 itetration
        printf("Note:- Higher sized arrays(n>1000) may take 3-4s for working\n");
        printf("BUBBLE  || SELECTION || QUICK  || MERGE \n");
        double tim1=0,tim2=0,tim3=0,tim4=0;                                   //seperate var to store time of different sorting algo
        while (it++<3)
        {
            long int a[n],b[n],c[n],d[n];                                     //different arrays for each algo
            for(int i=0;i<n;i++)
            {
                long int no= rand() %n +1 ;                                   //assigning of random numbers in one go to all arrays
                a[i]=no;
                b[i]=no;
                c[i]=no;
                d[i]=no;
            }

            for(int j=0; j<1000; j++)                                         //to approximate processing time difference after 1000 runs
            {

            clock_t start,end;

                                                                              //bubble sort
            start = clock();
            bubble_sort(a,n);
            end   = clock();
            tim1 += (double)(end - start)/CLOCKS_PER_SEC;

                                                                             //selection sort
            start = clock();
            selection_sort(b,n);
            end   = clock();
            tim2+= (double)(end - start)/CLOCKS_PER_SEC;

                                                                             //quick sort
            start = clock();
            quickSort(c,0,n-1);
            end   = clock();
            tim3 += (double)(end - start)/CLOCKS_PER_SEC;

                                                                             //merge sort
            start = clock();
            mergeSort(d,0,n-1);
            end   = clock();
            tim4 += (double)(end - start)/CLOCKS_PER_SEC;                    //execTime = ((double)endTime - startTime) / CLOCKS_PER_SEC
            }

             tim1/=1000;                                          //averaging out the calculated time
             tim2/=1000;
             tim3/=1000;
             tim4/=1000;

        printf("%f  ,%f  ,%f  ,%f  \n",tim1,tim2,tim3,tim4);        //printing out the processing differences for
        int h= least(tim1,tim2,tim3,tim4);                                  //comparison of time
        printf("For n= %ld fastest algorithm is  ",n);

             if (h==1) printf("Bubble Sort \n");
        else if (h==2) printf("Selection\n");
        else if (h==3) printf("Quick Sort\n");
        else if (h==4) printf("Merge Sort\n");
             n*=10;                                 // for array size n=100,1000 after every iteration
         }
         printf("Thanks for using this code\n");
        return 0;
    }
    
    //the output of all sorting algo for smaller arrays is nealy same for precesion till double. 
    //Best we can do is to multiply the output by 1000 to get the last trailing numerical ualues. 
    //also commenting out "CLOCKS_PER_SEC" will provide us output in number of clocks used but not in terms of second.
    //Present output is in seconds.
